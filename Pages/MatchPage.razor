@page "/Match"
@using BlazerServerCoaching.Data.Models;
@using BlazerServerCoaching.Data.Repo;
@using BlazorBootstrap


<PageTitle>Match</PageTitle>
<h3>Match Stats</h3>

<section class="Hero">

    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Date</th>
                <th>Type</th>
                <th>Oppenent</th>
                <th>Maps</th>
                <th>Satus</th>
                <th>T Win</th>
                <th>T Loss</th>
                <th>Total T</th>
                <th>CT Win</th>
                <th>CT Loss</th>
                <th>Total CT</th>
                <th>T Pistol</th>
                <th>CT Pistol</th>

            </tr>

        </thead>
        <tbody class="matchData">


            @for (int i = 0; i < matchLists.Count(); i++)
            {
                <tr>
                    <td>@matchLists[i].Id</td>
                    <td>@matchLists[i].Date</td>
                    <td>@matchLists[i].Type</td>
                    <td>@matchLists[i].Oppenent</td>
                    <td>@matchLists[i].Maps</td>
                    <td>@matchLists[i].Status</td>
                    <td>@matchLists[i].TSideW</td>
                    <td>@matchLists[i].TSideL</td>
                    <td>@CalculateTotalRound(matchLists[i].TSideW, matchLists[i].TSideL)</td>
                    <td>@matchLists[i].CTSideW</td>
                    <td>@matchLists[i].CTSideL</td>
                    <td>@CalculateTotalRound(matchLists[i].CTSideW, matchLists[i].CTSideL)</td>
                    <td>@matchLists[i].TPistol</td>
                    <td>@matchLists[i].CTPistol</td>
                </tr>
            }
            

        </tbody>

    </table>
</section>

<Modal @ref="create" Title="Create match">
    <BodyTemplate>
        Fill all the boxes to add a match<br><br>
        
        <form action="/action_page.php">
            <div>
                <div>
                    <label for="fname">Dato:</label><br>
                    <input class="form-control" type="text" id="date" name="date" value=""><br>
                    <label for="lname">Kamp type:</label><br>
                    <select class="form-select" aria-label="Default select example">
                        <option value=@matchType =1>Faceit</option>
                        <option value=@matchType =2>Scrim</option>
                        <option value=@matchType =3>Metal</option>
                        <option value=@matchType =4>Yousee</option>
                        <option value=@matchType =5>Power</option>
                    </select><br>
                </div>
                <div>
                    <label for="fname">Oppenent:</label><br>
                    <input class="form-control" type="text" id="oppenent" name="oppenent" value=""><br>
                    <label for="lname">Maps:</label><br>
                    <select class="form-select" aria-label="Default select example">
                        <option value=@matchMaps =1>Ancient</option>
                        <option value=@matchMaps =2>Inferno</option>
                        <option value=@matchMaps =3>Nuke</option>
                        <option value=@matchMaps =4>Vertigo</option>
                        <option value=@matchMaps =5>Overpass</option>
                        <option value=@matchMaps =6>Mirage</option>
                        <option value=@matchMaps =7>Anubis</option>
                    </select><br>
                    <label for="lname">Status:</label><br>
                    <select class="form-select" aria-label="Default select example">
                        <option value=@matchStatus =1>Win</option>
                        <option value=@matchStatus =2>Loss</option>
                        <option value=@matchStatus =3>Draw</option>
                    </select><br>
                </div>
            </div>

        </form>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideCreatePopupClick">Close</Button>
        <Button Color="ButtonColor.Primary">Save changes</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="delete" Title="Delete match">
    <BodyTemplate>
        Input the id of the match u want to delete
        <br><br>
        <label for="fname">Match id:</label><br>
        <input class="form-control" type="text" id="oppenent" name="oppenent" value=""><br>
        <p style="color:red">Warning when clicking delete, the data will be gone forever</p>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideDeletePopupClick">Close</Button>
        <Button Color="ButtonColor.Primary" @onclick="DeleteMatch">Save changes</Button>
        <br><br>
        @if (showText)
        {
            <p style="color:red">Data has been deleted</p>
        }
    </FooterTemplate>
</Modal>


<div class="Buttons">
    <button class="buttonInsert" role="button" @onclick="OnShowCreatePopupClick"> Create Match </button>

    <button class="buttonDelete" role="button" @onclick="OnShowDeletePopupClick">Remove a match</button>

    <button class="buttonEdit" role="button">Edit a match</button>
</div>


@code {

    private bool showText = false;

    private void DeleteMatch()
    {
        showText = true;
        counter++;
    }
    private int counter = 0;

    private MatchStatus matchStatus = new MatchStatus();

    private MatchMaps matchMaps = new MatchMaps();

    private MatchType matchType = new MatchType();

    private Modal? create = default!;

    private Modal? delete = default!;

    //private void SaveChanges()
    //{
    //    matchRepo.Save();
    //}

    private async Task OnShowCreatePopupClick()
    {
        await create.ShowAsync();
    }

    private async Task OnHideCreatePopupClick()
    {
        await create.HideAsync();
    }

    private async Task OnShowDeletePopupClick()
    {
        await delete.ShowAsync();
    }

    private async Task OnHideDeletePopupClick()
    {
        await delete.HideAsync();
        showText = false;
    }

    private bool isInitialized;

    private MatchRepo matchRepo = new MatchRepo();

    protected override async Task OnInitializedAsync()
    {
        matchLists.Clear();

        matchRepo.Load();

        //MatchType test = 0;

        //MatchMaps test1 = 0;

        //MatchStatus test2 = 0;

        //matchRepo.Save("12/12/2012", test, "bøv", test1 , test2, 10, 2, 3, 5, false, true);

    }

    private List<Match> matchLists = MatchRepo.GetMatchList();

    public int? CalculateTotalRound(int? wonRounds, int? lostRounds)
    {
        return wonRounds + lostRounds;
    }


}
