// <auto-generated />
using System;
using CoachingAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoachingAPI.Migrations
{
    [DbContext(typeof(PlayersDbContext))]
    [Migration("20240215131058_initial_create")]
    partial class initial_create
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CoachingAPI.Models.Map", b =>
                {
                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.HasKey("Name");

                    b.ToTable("Maps");
                });

            modelBuilder.Entity("CoachingAPI.Models.Match", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("MatchPlatform")
                        .HasColumnType("int");

                    b.Property<Guid?>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WinnerName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("WinnerName");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("CoachingAPI.Models.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Assists")
                        .HasColumnType("int");

                    b.Property<string>("CurrentTeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Deaths")
                        .HasColumnType("int");

                    b.Property<int>("Headshots")
                        .HasColumnType("int");

                    b.Property<bool>("IsCoach")
                        .HasColumnType("bit");

                    b.Property<int>("KDRatio")
                        .HasColumnType("int");

                    b.Property<int>("KRRatio")
                        .HasColumnType("int");

                    b.Property<int>("Kills")
                        .HasColumnType("int");

                    b.Property<int>("Losses")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeamName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrentTeamName");

                    b.HasIndex("TeamName");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("CoachingAPI.Models.PlayerMapStats", b =>
                {
                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MapName")
                        .HasColumnType("int");

                    b.Property<int>("CtPistolRoundsLost")
                        .HasColumnType("int");

                    b.Property<int>("CtPistolRoundsPlayed")
                        .HasColumnType("int");

                    b.Property<int>("CtPistolRoundsWon")
                        .HasColumnType("int");

                    b.Property<int>("CtRoundsPlayed")
                        .HasColumnType("int");

                    b.Property<int>("Losses")
                        .HasColumnType("int");

                    b.Property<int>("MatchesPlayed")
                        .HasColumnType("int");

                    b.Property<int>("TPistolRoundsLost")
                        .HasColumnType("int");

                    b.Property<int>("TPistolRoundsPlayed")
                        .HasColumnType("int");

                    b.Property<int>("TPistolRoundsWins")
                        .HasColumnType("int");

                    b.Property<int>("TRoundsPlayed")
                        .HasColumnType("int");

                    b.Property<int>("TotalRoundsPlayed")
                        .HasColumnType("int");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.HasKey("PlayerId", "MapName");

                    b.HasIndex("MapName");

                    b.ToTable("PlayerMapStats");
                });

            modelBuilder.Entity("CoachingAPI.Models.PlayerStats", b =>
                {
                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Assists")
                        .HasColumnType("int");

                    b.Property<int>("Deaths")
                        .HasColumnType("int");

                    b.Property<int>("Headshots")
                        .HasColumnType("int");

                    b.Property<int>("KDRatio")
                        .HasColumnType("int");

                    b.Property<int>("KRRatio")
                        .HasColumnType("int");

                    b.Property<int>("Kills")
                        .HasColumnType("int");

                    b.Property<int>("Losses")
                        .HasColumnType("int");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.HasKey("PlayerId");

                    b.ToTable("PlayerStats");
                });

            modelBuilder.Entity("CoachingAPI.Models.Team", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("CoachId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsMatchMaking")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MatchId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Name");

                    b.HasIndex("CoachId");

                    b.HasIndex("MatchId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("CoachingAPI.Models.Match", b =>
                {
                    b.HasOne("CoachingAPI.Models.Player", null)
                        .WithMany("Matches")
                        .HasForeignKey("PlayerId");

                    b.HasOne("CoachingAPI.Models.Team", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerName");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("CoachingAPI.Models.Player", b =>
                {
                    b.HasOne("CoachingAPI.Models.Team", "CurrentTeam")
                        .WithMany("Players")
                        .HasForeignKey("CurrentTeamName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoachingAPI.Models.Team", null)
                        .WithMany("Standins")
                        .HasForeignKey("TeamName");

                    b.Navigation("CurrentTeam");
                });

            modelBuilder.Entity("CoachingAPI.Models.PlayerMapStats", b =>
                {
                    b.HasOne("CoachingAPI.Models.Map", "Map")
                        .WithMany()
                        .HasForeignKey("MapName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoachingAPI.Models.Player", "Player")
                        .WithMany("MapStats")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Map");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("CoachingAPI.Models.PlayerStats", b =>
                {
                    b.HasOne("CoachingAPI.Models.Player", "Player")
                        .WithOne("Stats")
                        .HasForeignKey("CoachingAPI.Models.PlayerStats", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("CoachingAPI.Models.Team", b =>
                {
                    b.HasOne("CoachingAPI.Models.Player", "Coach")
                        .WithMany("FormerTeams")
                        .HasForeignKey("CoachId");

                    b.HasOne("CoachingAPI.Models.Match", null)
                        .WithMany("Teams")
                        .HasForeignKey("MatchId");

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("CoachingAPI.Models.Match", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("CoachingAPI.Models.Player", b =>
                {
                    b.Navigation("FormerTeams");

                    b.Navigation("MapStats");

                    b.Navigation("Matches");

                    b.Navigation("Stats")
                        .IsRequired();
                });

            modelBuilder.Entity("CoachingAPI.Models.Team", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("Standins");
                });
#pragma warning restore 612, 618
        }
    }
}
