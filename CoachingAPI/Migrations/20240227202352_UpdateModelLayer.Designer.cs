// <auto-generated />
using System;
using CoachingAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoachingAPI.Migrations
{
    [DbContext(typeof(PlayersDbContext))]
    [Migration("20240227202352_UpdateModelLayer")]
    partial class UpdateModelLayer
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CoachingAPI.Models.GeneralStats", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Assists")
                        .HasColumnType("int");

                    b.Property<int>("Deaths")
                        .HasColumnType("int");

                    b.Property<int>("Headshots")
                        .HasColumnType("int");

                    b.Property<int>("KDRatio")
                        .HasColumnType("int");

                    b.Property<int>("KRRatio")
                        .HasColumnType("int");

                    b.Property<int>("Kills")
                        .HasColumnType("int");

                    b.Property<int>("Losses")
                        .HasColumnType("int");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GeneralStats");
                });

            modelBuilder.Entity("CoachingAPI.Models.Map", b =>
                {
                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.HasKey("Name");

                    b.ToTable("Map", (string)null);
                });

            modelBuilder.Entity("CoachingAPI.Models.MapStats", b =>
                {
                    b.Property<Guid>("FK_GeneralStatsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FK_MapName")
                        .HasColumnType("int");

                    b.Property<int>("CtPistolRoundsLost")
                        .HasColumnType("int");

                    b.Property<int>("CtPistolRoundsPlayed")
                        .HasColumnType("int");

                    b.Property<int>("CtPistolRoundsWon")
                        .HasColumnType("int");

                    b.Property<int>("CtRoundsPlayed")
                        .HasColumnType("int");

                    b.Property<int>("Losses")
                        .HasColumnType("int");

                    b.Property<int>("MatchesPlayed")
                        .HasColumnType("int");

                    b.Property<int>("TPistolRoundsLost")
                        .HasColumnType("int");

                    b.Property<int>("TPistolRoundsPlayed")
                        .HasColumnType("int");

                    b.Property<int>("TPistolRoundsWins")
                        .HasColumnType("int");

                    b.Property<int>("TRoundsPlayed")
                        .HasColumnType("int");

                    b.Property<int>("TotalRoundsPlayed")
                        .HasColumnType("int");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.HasKey("FK_GeneralStatsId", "FK_MapName");

                    b.HasIndex("FK_MapName");

                    b.ToTable("MapStats");
                });

            modelBuilder.Entity("CoachingAPI.Models.Match", b =>
                {
                    b.Property<Guid>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("FK_WinnerTeamName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MatchPlatform")
                        .HasColumnType("int");

                    b.HasKey("MatchId");

                    b.HasIndex("FK_WinnerTeamName");

                    b.ToTable("Match", (string)null);
                });

            modelBuilder.Entity("CoachingAPI.Models.Membership", b =>
                {
                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TeamName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LeaveDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MembershipType")
                        .HasColumnType("int");

                    b.HasKey("PlayerId", "TeamName");

                    b.HasIndex("TeamName");

                    b.ToTable("Membership", (string)null);
                });

            modelBuilder.Entity("CoachingAPI.Models.Player", b =>
                {
                    b.Property<Guid>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FK_GeneralStatsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCoach")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlayerId");

                    b.HasIndex("FK_GeneralStatsId")
                        .IsUnique()
                        .HasFilter("[FK_GeneralStatsId] IS NOT NULL");

                    b.ToTable("Player", (string)null);
                });

            modelBuilder.Entity("CoachingAPI.Models.PlayerPerformanceStats", b =>
                {
                    b.Property<Guid>("FK_PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FK_MatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Assists")
                        .HasColumnType("int");

                    b.Property<int>("Deaths")
                        .HasColumnType("int");

                    b.Property<int>("Headshots")
                        .HasColumnType("int");

                    b.Property<double>("KDRatio")
                        .HasColumnType("float");

                    b.Property<double>("KRRatio")
                        .HasColumnType("float");

                    b.Property<int>("Kills")
                        .HasColumnType("int");

                    b.HasKey("FK_PlayerId", "FK_MatchId");

                    b.HasIndex("FK_MatchId");

                    b.ToTable("PlayerPerformanceStats");
                });

            modelBuilder.Entity("CoachingAPI.Models.Team", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("FK_GeneralStatsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsMatchMaking")
                        .HasColumnType("bit");

                    b.HasKey("Name");

                    b.HasIndex("FK_GeneralStatsId")
                        .IsUnique()
                        .HasFilter("[FK_GeneralStatsId] IS NOT NULL");

                    b.ToTable("Team", (string)null);
                });

            modelBuilder.Entity("CoachingAPI.Models.TeamPerformanceStats", b =>
                {
                    b.Property<string>("FK_TeamName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("FK_MatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Assists")
                        .HasColumnType("int");

                    b.Property<int>("CTPistolRoundWon")
                        .HasColumnType("int");

                    b.Property<int>("CTRoundsPlayed")
                        .HasColumnType("int");

                    b.Property<int>("CTRoundsWon")
                        .HasColumnType("int");

                    b.Property<int>("Deaths")
                        .HasColumnType("int");

                    b.Property<int>("Headshots")
                        .HasColumnType("int");

                    b.Property<double>("KDRatio")
                        .HasColumnType("float");

                    b.Property<double>("KRRatio")
                        .HasColumnType("float");

                    b.Property<int>("Kills")
                        .HasColumnType("int");

                    b.Property<int>("TPistolRoundWon")
                        .HasColumnType("int");

                    b.Property<int>("TRoundsPlayed")
                        .HasColumnType("int");

                    b.Property<int>("TRoundsWon")
                        .HasColumnType("int");

                    b.HasKey("FK_TeamName", "FK_MatchId");

                    b.HasIndex("FK_MatchId");

                    b.ToTable("TeamPerformanceStats");
                });

            modelBuilder.Entity("MatchTeam", b =>
                {
                    b.Property<Guid>("MatchesMatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TeamsName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MatchesMatchId", "TeamsName");

                    b.HasIndex("TeamsName");

                    b.ToTable("MatchTeam");
                });

            modelBuilder.Entity("CoachingAPI.Models.MapStats", b =>
                {
                    b.HasOne("CoachingAPI.Models.GeneralStats", "RelatedGeneralStats")
                        .WithMany("MapStats")
                        .HasForeignKey("FK_GeneralStatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoachingAPI.Models.Map", "Map")
                        .WithMany()
                        .HasForeignKey("FK_MapName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Map");

                    b.Navigation("RelatedGeneralStats");
                });

            modelBuilder.Entity("CoachingAPI.Models.Match", b =>
                {
                    b.HasOne("CoachingAPI.Models.Team", "Winner")
                        .WithMany()
                        .HasForeignKey("FK_WinnerTeamName");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("CoachingAPI.Models.Membership", b =>
                {
                    b.HasOne("CoachingAPI.Models.Player", "Player")
                        .WithMany("Memberships")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoachingAPI.Models.Team", "Team")
                        .WithMany("Memberships")
                        .HasForeignKey("TeamName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("CoachingAPI.Models.Player", b =>
                {
                    b.HasOne("CoachingAPI.Models.GeneralStats", "Stats")
                        .WithOne()
                        .HasForeignKey("CoachingAPI.Models.Player", "FK_GeneralStatsId");

                    b.Navigation("Stats");
                });

            modelBuilder.Entity("CoachingAPI.Models.PlayerPerformanceStats", b =>
                {
                    b.HasOne("CoachingAPI.Models.Match", "RelatedMatch")
                        .WithMany("PlayerPerformanceStats")
                        .HasForeignKey("FK_MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoachingAPI.Models.Player", "RelatedPlayer")
                        .WithMany()
                        .HasForeignKey("FK_PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RelatedMatch");

                    b.Navigation("RelatedPlayer");
                });

            modelBuilder.Entity("CoachingAPI.Models.Team", b =>
                {
                    b.HasOne("CoachingAPI.Models.GeneralStats", "Stats")
                        .WithOne()
                        .HasForeignKey("CoachingAPI.Models.Team", "FK_GeneralStatsId");

                    b.Navigation("Stats");
                });

            modelBuilder.Entity("CoachingAPI.Models.TeamPerformanceStats", b =>
                {
                    b.HasOne("CoachingAPI.Models.Match", "RelatedMatch")
                        .WithMany("TeamPerformanceStats")
                        .HasForeignKey("FK_MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoachingAPI.Models.Team", "RelatedTeam")
                        .WithMany()
                        .HasForeignKey("FK_TeamName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RelatedMatch");

                    b.Navigation("RelatedTeam");
                });

            modelBuilder.Entity("MatchTeam", b =>
                {
                    b.HasOne("CoachingAPI.Models.Match", null)
                        .WithMany()
                        .HasForeignKey("MatchesMatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoachingAPI.Models.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoachingAPI.Models.GeneralStats", b =>
                {
                    b.Navigation("MapStats");
                });

            modelBuilder.Entity("CoachingAPI.Models.Match", b =>
                {
                    b.Navigation("PlayerPerformanceStats");

                    b.Navigation("TeamPerformanceStats");
                });

            modelBuilder.Entity("CoachingAPI.Models.Player", b =>
                {
                    b.Navigation("Memberships");
                });

            modelBuilder.Entity("CoachingAPI.Models.Team", b =>
                {
                    b.Navigation("Memberships");
                });
#pragma warning restore 612, 618
        }
    }
}
