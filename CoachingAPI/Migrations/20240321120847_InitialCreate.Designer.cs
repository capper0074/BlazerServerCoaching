// <auto-generated />
using System;
using CoachingAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoachingAPI.Migrations
{
    [DbContext(typeof(PlayersDbContext))]
    [Migration("20240321120847_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CoachingAPI.Models.Map", b =>
                {
                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.HasKey("Name");

                    b.ToTable("Map", (string)null);
                });

            modelBuilder.Entity("CoachingAPI.Models.Match", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("FKMapName")
                        .HasColumnType("int");

                    b.Property<Guid>("FKTeamWinnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MatchPlatform")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FKMapName");

                    b.HasIndex("FKTeamWinnerId");

                    b.ToTable("Match", (string)null);
                });

            modelBuilder.Entity("CoachingAPI.Models.Membership", b =>
                {
                    b.Property<Guid>("FKPlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FKTeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LeaveDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MembershipType")
                        .HasColumnType("int");

                    b.HasKey("FKPlayerId", "FKTeamId");

                    b.HasIndex("FKTeamId");

                    b.ToTable("Membership", (string)null);
                });

            modelBuilder.Entity("CoachingAPI.Models.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Player", (string)null);
                });

            modelBuilder.Entity("CoachingAPI.Models.PlayerMatchStats", b =>
                {
                    b.Property<Guid>("FKPlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FKMatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Assists")
                        .HasColumnType("int");

                    b.Property<int>("Deaths")
                        .HasColumnType("int");

                    b.Property<Guid>("FKTeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Headshots")
                        .HasColumnType("int");

                    b.Property<double>("KDRatio")
                        .HasColumnType("float");

                    b.Property<double>("KRRatio")
                        .HasColumnType("float");

                    b.Property<int>("Kills")
                        .HasColumnType("int");

                    b.HasKey("FKPlayerId", "FKMatchId");

                    b.HasIndex("FKMatchId");

                    b.HasIndex("FKTeamId", "FKMatchId");

                    b.ToTable("PlayerMatchStats");
                });

            modelBuilder.Entity("CoachingAPI.Models.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsMatchMaking")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Team", (string)null);
                });

            modelBuilder.Entity("CoachingAPI.Models.TeamMatchStats", b =>
                {
                    b.Property<Guid>("FKTeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FKMatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CTPistolRoundWon")
                        .HasColumnType("int");

                    b.Property<int>("CTRoundsPlayed")
                        .HasColumnType("int");

                    b.Property<int>("CTRoundsWon")
                        .HasColumnType("int");

                    b.Property<int>("TPistolRoundWon")
                        .HasColumnType("int");

                    b.Property<int>("TRoundsPlayed")
                        .HasColumnType("int");

                    b.Property<int>("TRoundsWins")
                        .HasColumnType("int");

                    b.HasKey("FKTeamId", "FKMatchId");

                    b.HasIndex("FKMatchId")
                        .IsUnique();

                    b.ToTable("TeamMatchStats");
                });

            modelBuilder.Entity("MatchTeam", b =>
                {
                    b.Property<Guid>("MatchesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeamsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MatchesId", "TeamsId");

                    b.HasIndex("TeamsId");

                    b.ToTable("MatchTeam");
                });

            modelBuilder.Entity("CoachingAPI.Models.Match", b =>
                {
                    b.HasOne("CoachingAPI.Models.Map", "Map")
                        .WithMany()
                        .HasForeignKey("FKMapName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoachingAPI.Models.Team", "Winner")
                        .WithMany()
                        .HasForeignKey("FKTeamWinnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Map");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("CoachingAPI.Models.Membership", b =>
                {
                    b.HasOne("CoachingAPI.Models.Player", "Player")
                        .WithMany("Memberships")
                        .HasForeignKey("FKPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoachingAPI.Models.Team", "Team")
                        .WithMany("Memberships")
                        .HasForeignKey("FKTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("CoachingAPI.Models.PlayerMatchStats", b =>
                {
                    b.HasOne("CoachingAPI.Models.Match", "Match")
                        .WithMany("PlayerMatchStats")
                        .HasForeignKey("FKMatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoachingAPI.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("FKPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoachingAPI.Models.TeamMatchStats", "TeamMatchStats")
                        .WithMany()
                        .HasForeignKey("FKTeamId", "FKMatchId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Player");

                    b.Navigation("TeamMatchStats");
                });

            modelBuilder.Entity("CoachingAPI.Models.TeamMatchStats", b =>
                {
                    b.HasOne("CoachingAPI.Models.Match", "Match")
                        .WithOne("TeamMatchStats")
                        .HasForeignKey("CoachingAPI.Models.TeamMatchStats", "FKMatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoachingAPI.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("FKTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("MatchTeam", b =>
                {
                    b.HasOne("CoachingAPI.Models.Match", null)
                        .WithMany()
                        .HasForeignKey("MatchesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoachingAPI.Models.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoachingAPI.Models.Match", b =>
                {
                    b.Navigation("PlayerMatchStats");

                    b.Navigation("TeamMatchStats");
                });

            modelBuilder.Entity("CoachingAPI.Models.Player", b =>
                {
                    b.Navigation("Memberships");
                });

            modelBuilder.Entity("CoachingAPI.Models.Team", b =>
                {
                    b.Navigation("Memberships");
                });
#pragma warning restore 612, 618
        }
    }
}
